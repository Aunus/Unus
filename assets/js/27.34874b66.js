(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{351:function(e,t,o){"use strict";o.r(t);var r=o(0),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"lombok"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#lombok"}},[e._v("#")]),e._v(" Lombok")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方网站"),o("OutboundLink")],1),e._v(" "),o("a",{attrs:{href:"https://plugins.jetbrains.com/plugin/6317-lombok",target:"_blank",rel:"noopener noreferrer"}},[e._v("IDEA插件地址"),o("OutboundLink")],1)]),e._v(" "),o("h2",{attrs:{id:"原理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),o("p",[e._v("在编译时用的依赖包，在编译期将相关带Lombok注解的Java文件编译为完整的Class文件，简化日常的样板代码，提升开发效率，但是也降低了源代码的完整性以及对问题排除的难度。")]),e._v(" "),o("h2",{attrs:{id:"lombok-features"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#lombok-features"}},[e._v("#")]),e._v(" Lombok features")]),e._v(" "),o("ul",[o("li",[e._v("val: "),o("strong",[e._v("不常用")]),e._v(" 在局部变量前声明，相当于final。")]),e._v(" "),o("li",[e._v("var: "),o("strong",[e._v("不常用")]),e._v(" "),o("strong",[e._v("Experimental features")]),e._v(" 在局部变量前声明，可推测其数据类型。")]),e._v(" "),o("li",[e._v("@NonNull: 在方法或构造函数的参数上使用，Null值校验，如果为Null会抛出NullPointerException")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(' if (person == null) {\n      throw new NullPointerException("person is marked @NonNull but is null");\n    }\n')])])]),o("ul",[o("li",[e._v("@Cleanup: 自动资源管理，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成 try-finally 来关闭流().")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('#默认调用close()方法\n@Cleanup InputStream in = new FileInputStream(args[0]);\n#若无close()方法，可以声明关闭方法\n@Cleanup("dispose") org.eclipse.swt.widgets.CoolBar bar = new CoolBar(parent, 0);\n')])])]),o("ul",[o("li",[e._v("@Getter/@Setter：用在属性上，不用写setter/getter方法，可指定访问范围(AccessLevel,默认PUBLIC)。")]),e._v(" "),o("li",[e._v("@ToString:用在类上，重写toString方法，@ToString.Exclude可排除 属性，@ToString(callSuper=true, includeFieldNames=true) 调用父类的 toString 方法，包含所有属性。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(' @Override public String toString() {\n    return "ToStringExample(" + this.getName() + ", " + this.shape + ", " + Arrays.deepToString(this.tags) + ")";\n  }\n')])])]),o("ul",[o("li",[o("p",[e._v("@EqualsAndHashCode：用在类上，自动生成 equals 方法和 hashCode 方法；")])]),e._v(" "),o("li",[o("p",[e._v('@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有 @NonNull 属性作为参数的构造函数，如果指定 staticName="of" 参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多；')])]),e._v(" "),o("li",[o("p",[e._v("@Data：注解在类上，相当于同时使用了 @ToString、@EqualsAndHashCode、@Getter、@Setter 和 @RequiredArgsConstrutor 这些注解，对于 POJO 类十分有用；")])]),e._v(" "),o("li",[o("p",[e._v("@Value：用在类上，是 @Data 的不可变形式，相当于为属性添加 final 声明，只提供 getter 方法，而不提供 setter 方法；")])]),e._v(" "),o("li",[o("p",[e._v("@Builder：用在类、构造器、方法上，为你提供复杂的 builder APIs。")]),e._v(" "),o("ul",[o("li",[e._v("@Builder@Singular自lombok v1.16.8起，使用可以添加明确的方法。")])])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('Person.builder().name("Adam Savage").city("San Francisco").job("Mythbusters").job("Unchained Reaction").build();\n')])])]),o("ul",[o("li",[e._v("@SneakyThrows：自动抛受检异常，而无需显式在方法上使用 throws 语句；")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('import lombok.SneakyThrows;\n\npublic class SneakyThrowsExample implements Runnable {\n  @SneakyThrows(UnsupportedEncodingException.class)\n  public String utf8ToString(byte[] bytes) {\n    return new String(bytes, "UTF-8");\n  }\n  \n  @SneakyThrows\n  public void run() {\n    throw new Throwable();\n  }\n}\n\n\nimport lombok.Lombok;\n\npublic class SneakyThrowsExample implements Runnable {\n  public String utf8ToString(byte[] bytes) {\n    try {\n      return new String(bytes, "UTF-8");\n    } catch (UnsupportedEncodingException e) {\n      throw Lombok.sneakyThrow(e);\n    }\n  }\n  \n  public void run() {\n    try {\n      throw new Throwable();\n    } catch (Throwable t) {\n      throw Lombok.sneakyThrow(t);\n    }\n  }\n}\n')])])]),o("ul",[o("li",[o("p",[e._v("@Synchronized：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性")])]),e._v(" "),o("li",[o("p",[e._v("@With:用在属性上，创建克隆但具有一个已更改字段的方法.")])]),e._v(" "),o("li",[o("p",[e._v("@Getter(lazy=true)：可以替代经典的 Double Check Lock 样板代码；")])]),e._v(" "),o("li",[o("p",[e._v("@Log: 用在类上，声明日志")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("@CommonsLog\n创造 private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);\n@Flogger\n创造 private static final com.google.common.flogger.FluentLogger log = com.google.common.flogger.FluentLogger.forEnclosingClass();\n@JBossLog\n创造 private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);\n@Log\n创造 private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());\n@Log4j\n创造 private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);\n@Log4j2\n创造 private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);\n@Slf4j\n创造 private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);\n@XSlf4j\n创造 private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);\n@CustomLog\n创造 private static final com.foo.your.Logger log = com.foo.your.LoggerFactory.createYourLogger(LogExample.class);\n此选项要求您将配置添加到lombok.config文件中以指定@CustomLog应执行的操作。\n")])])]),o("ul",[o("li",[e._v("@Accessors：用于配置lombok如何生成和查找getter和setter。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("@Accessors 因此有3个选择：\n\nfluent–一个布尔值。如果属实，对于getter pepper只是pepper()，并且setter pepper(T newValue)。此外，除非指定，否则chain默认为true。\n默认值：false。\nchain–一个布尔值。如果为true，则生成的setter this而不是返回void。\n默认值：false，除非fluent=true，然后默认值：true。\nprefix–字符串列表。如果存在，则字段必须使用任何这些前缀作为前缀。依次将每个字段名称与列表中的每个前缀进行比较，如果找到匹配项，则会删除前缀以创建该字段的基本名称。在列表中包括一个始终匹配的空字符串是合法的。对于字母字符，前缀后面的字符不能为小写字母，即，pepper即使与prefix也不匹配p，但pEpper必须是（并且表示该字段的基本名称为epper）。\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);